[tool.poetry]
name = "Addressing Missing Sources with Adversarial SUpport-Matching"
version = "1.0.0"
description = "Code for the NeurIPS paper 'Addressing MIssing Sources with Adversarial SUpport-Matching'"
authors = ["PAL <info@predictive-analytics-lab.com>"]
packages = [
  { include = "clustering" },
  { include = "advrep" },
  { include = "shared" },
]
include=["clustering/py.typed", "advrep/py.typed", "shared/py.typed"]
classifiers=[
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Operating System :: OS Independent",
  "Typing :: Typed",
]
keywords=["python", "pytorch", "neurips21"]
repository="https://github.com/predictive-analytics-lab/suds"
readme="README.md"

[tool.poetry.dependencies]
python = "^3.7"
ethicml = "^0.2.0"
faiss-cpu = "*"
hydra-core = "1.1.0rc1"
hydra-ray-launcher = "*"
hydra-submitit-launcher = "1.1.5.dev2"
lapjv = "*"
numpy = "^1.15"
matplotlib = ">= 3.0.2, < 3.3.1"
pandas = "^1.0"
scipy = "^1.2.1"
scikit_learn = "^0.20.1"
teext = "*"
torch = "^1.8"
torchvision = "*"
tqdm = "^4.31.1"
typer = "*"
typing-extensions = "^3.7.2"
wandb = "*"

lightning-bolts = "^0.3.4"
palkit = "^0.3.8"

[tool.poetry.dev-dependencies]
black = "*"
isort = "*"
mypy = "*"
pre-commit = "*"
pydocstyle = "*"
pytest = "*"
python-type-stubs = {git = "https://github.com/predictive-analytics-lab/python-type-stubs.git", branch = "main" }

[tool.black]
line-length = 100
target-version = ['py36']

[tool.isort]
known_third_party = [
  "black",
  "click",
  "click_option_group",
  "ethicml",
  "hydra",
  "matplotlib",
  "mypy",
  "numpy",
  "omegaconf",
  "pandas",
  "pylint",
  "pytest",
  "scipy",
  "setuptools",
  "sklearn",
  "torch",
  "tqdm",
  "wandb",
]
known_future_library = []
extra_standard_library = ["dataclasses", "__future__", "typing_extensions"]
line_length = 88
profile = "black"
force_sort_within_sections = "True"
classes = ["MISSING", "TYPE_CHECKING"]

[tool.pyright]
include = ["ssa"]
exclude = ["**/node_modules", "**/__pycache__"]
typeCheckingMode = "basic"
pythonVersion = "3.7"
reportUnusedImport = "error"
reportDuplicateImport  = "error"
reportIncompatibleVariableOverride = "error"
reportOverlappingOverload = "error"
reportUntypedNamedTuple = "error"
reportConstantRedefinition = "warning"
reportMissingImports = "error"
reportMissingTypeStubs = "warning"
strictListInference = true
strictSetInference = true
strictParameterNoneValue = true

[tool.mypy]
python_version = "3.8"
no_implicit_optional = true
allow_redefinition = true
strict_equality = true
check_untyped_defs = true
warn_unreachable = true
disallow_any_unimported = false
disallow_untyped_defs = true
disallow_incomplete_defs = true
show_error_codes = true
warn_unused_ignores = false

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "pytest.*",
    "sklearn.*",
]
ignore_missing_imports = true

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
