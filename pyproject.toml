[tool.poetry]
name = "support-matching"
package-mode = false
description = "Addressing Missing Sources with Adversarial Support-Matching"
authors = ["PAL <info@wearepal.com>"]
packages = [{ include = "src" }, { include = "hydra_plugins" }]
classifiers = [
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Operating System :: OS Independent",
  "Typing :: Typed",
]
readme = "README.md"

[tool.poetry.dependencies]
GitPython = { version = ">=2.1.11" }
aioredis = "^1.3.1"
ethicml = { version = ">=1.0.0", extras = ["metrics"] }
hydra-core = { version = ">=1.2.0" }
hydra-submitit-launcher = { version = "^1.1.6" }
# llvmlite = ">=0.35.0,<0.39"
matplotlib = ">= 3.8.0"
numpy = { version = ">=1.23.2" }
pandas = { version = ">=1.5.0" }
pillow = "*"
python = ">=3.10,<3.13"
ranzen = { version = "^2.1.2" }
scikit-image = ">=0.14"
scikit_learn = { version = ">=0.20.1" }
scipy = { version = ">=1.2.1" }
seaborn = { version = ">=0.9.0" }
torch-conduit = { version = ">=0.4.2", extras = ["image", "fair"] }
typing_extensions = ">= 4.10"

tqdm = { version = ">=4.31.1" }
typer = "*"
umap-learn = "^0.5.1"
wandb = "*"
loguru = "^0.6.0"
ftfy = "^6.1.1"
regex = "^2022.8.17"
optuna = "^3.0.0"
einops = "^0.5.0"

[tool.poetry.group.torch]
optional = true

[tool.poetry.group.torch.dependencies]
clip = { git = "https://github.com/openai/CLIP.git", rev = "a9b1bf5" }
timm = "^0.6.7"
pytorch-lightning = "^2.0.3"
torch = "^2.0.1"
torchvision = ">=0.15.2"

[tool.poetry.group.dev.dependencies]
types-tqdm = "*"
pandas-stubs = "*"
python-type-stubs = { git = "https://github.com/wearepal/python-type-stubs.git", rev = "8d5f608" }

[tool.poetry.group.lint.dependencies]
ruff = ">=0.3.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py310"
line-length = 100
extend-exclude = ["hydra_plugins"]

[tool.ruff.format]
quote-style = "preserve"

[tool.ruff.lint]
select = ["I", "F", "E", "W", "UP"]
ignore = [
  "F541",  # f-string without placeholder
  "E501",  # line too long
  "E741",  # Ambiguous variable name
  "UP038", # isinstance check with unions
]

[tool.ruff.lint.isort]
known-third-party = [
  "click",
  "click_option_group",
  "ethicml",
  "hydra",
  "matplotlib",
  "mypy",
  "numpy",
  "omegaconf",
  "pandas",
  "pylint",
  "pytest",
  "scipy",
  "setuptools",
  "sklearn",
  "torch",
  "tqdm",
  "wandb",
]
no-lines-before = ["future", "standard-library"]
extra-standard-library = ["typing_extensions"]
force-sort-within-sections = true
split-on-trailing-comma = false
classes = ["MISSING", "LAFTR", "NICOPP"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
  "F403", # star import
]
"analysis/*" = [
  "E402", # import at top of file
  "F401", # unused import
]

[tool.pyright]
pythonVersion = "3.10"
typeCheckingMode = "strict"
reportMissingTypeStubs = "none"
reportUnknownParameterType = "none"
reportUnknownArgumentType = "none"
reportUnknownLambdaType = "none"
reportUnknownVariableType = "none"
reportUnknownMemberType = "none"
reportMissingTypeArgument = "none"
reportUnnecessaryCast = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"
exclude = [
  "outputs",
  "multirun",
  "results",
  "data",
  "local_logging",
  "venv",
  "artifacts",
  "hydra_plugins",
  "conf",
  "scripts",
  "experiments",
  ".venv",
]
