[tool.poetry]
name = "support-matching"
version = "1.0.0"
description = "Addressing Missing Sources with Adversarial Support-Matching"
authors = ["PAL <info@wearepal.com>"]
packages = [
  { include = "src" },
  { include = "hydra_plugins" }
]
classifiers=[
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Operating System :: OS Independent",
  "Typing :: Typed",
]
readme="README.md"

[tool.poetry.dependencies]
GitPython = { version = ">=2.1.11" }
aioredis = "^1.3.1"
ethicml = { version=">=1.0.0", extras=["metrics"] }
hydra-core = { version = ">=1.2.0" }
hydra-submitit-launcher = { version = "^1.1.6" }
# llvmlite = ">=0.35.0,<0.39"
matplotlib = ">= 3.6.0"
neoconfigen = ">=2.3.3"
numpy = { version = ">=1.23.2" }
pandas = { version = ">=1.5.0" }
pillow = "*"
python = ">=3.9.11,<3.12"
ranzen = { version = "^2.1.2" }
scikit-image = ">=0.14"
scikit_learn = { version = ">=0.20.1" }
scipy = { version = ">=1.2.1" }
seaborn = { version = ">=0.9.0" }
torch-conduit = { version = "^0.3.4", extras = ["image"] }

tqdm = { version = ">=4.31.1" }
typer = "*"
umap-learn = "^0.5.1"
wandb = "*"
loguru = "^0.6.0"
ftfy = "^6.1.1"
regex = "^2022.8.17"
optuna = "^3.0.0"
einops = "^0.5.0"
pot = "^0.9.0"

[tool.poetry.group.torch]
optional = true

[tool.poetry.group.torch.dependencies]
clip = { git = "https://github.com/openai/CLIP.git", rev = "a9b1bf5" }
timm = "^0.6.7"
pytorch-lightning = "^2.0.2"
torch = "^2.0.1"
torchvision = "^0.15.2"

[tool.poetry.group.dev.dependencies]
black = "*"
ruff = "*"
mypy = "*"
pytest = "*"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py39']

[tool.ruff]
target-version = "py39"
# line length here only affects import sorting
line-length = 88
select = ["I", "F", "E", "W", "UP"]
ignore = [
  "F541",  # f-string without placeholder
  "E501",  # line too long
  "E741",  # Ambiguous variable name
  "UP006",  # generic standard library
  "UP007",  # new-style unions
]

[tool.ruff.isort]
known-third-party = [
  "black",
  "click",
  "click_option_group",
  "ethicml",
  "hydra",
  "matplotlib",
  "mypy",
  "numpy",
  "omegaconf",
  "pandas",
  "pylint",
  "pytest",
  "scipy",
  "setuptools",
  "sklearn",
  "torch",
  "tqdm",
  "wandb",
]
no-lines-before = ["future", "standard-library"]
extra-standard-library = ["typing_extensions"]
force-sort-within-sections = true
split-on-trailing-comma = false
classes = ["MISSING", "LAFTR", "NICOPP"]

[tool.ruff.per-file-ignores]
"__init__.py" = [
  "F403",  # star import
]

[tool.pyright]
pythonVersion = "3.9"
typeCheckingMode = "strict"
reportMissingTypeStubs = "none"
reportUnknownParameterType = "none"
reportUnknownArgumentType = "none"
reportUnknownLambdaType = "none"
reportUnknownVariableType = "none"
reportUnknownMemberType = "none"
reportMissingTypeArgument = "none"
reportUnnecessaryTypeIgnoreComment = "warning"
exclude = ["outputs", "multirun", "results", "data", "local_logging", "venv", "artifacts", "hydra_plugins", "external_confs", "conf", ".venv"]
