- include:  # import flag definitions
  - flags/clustering.yml
  - flags/data_spec.yml
  - flags/encoder.yml
  - flags/fdm.yml

- config: model_base
  operations:
    run:
      description: "Run the model."
      exec: "bash .guild/sourcecode/wrapper.sh {{entry-point}} ${flag_args}"
      flags-dest: args  # pass flags as commandline arguments
      flags-import: all  # or `false`
      label: 'exp_group=${exp-group}/ seed=${data-split-seed}'
      env:
        STARTED_BY_GUILDAI: "1"  # signal to the code that it's running within guildai
      env-secrets:  # don't include this in the logging; it's not interesting
        - STARTED_BY_GUILDAI
      # `sourcecode` determines which files are copied into the run dir
      # to test whether your regex's work use the --test-sourcecode flag
      sourcecode:  # which files to copy
        - exclude:
            dir:
              - analysis
              - experiments
              - flags
              - results
              - scripts
              - tests
              - wandb
        - exclude: '.*'
        # I don't know why this is needed, but it is:
        - include: 'shared/*'
        - include: 'shared/configs/*'
        - include: 'shared/data/*'
        - include: 'shared/layers/*'
        - include: 'shared/models/*'
        - include: 'shared/utils/*'
        - include: 'fdm/optimisation/*'
        - include: 'kornia/*'
        - include: 'wrapper.sh'

- model: autoencoder
  description: "Only the autoencoder from the clustering"
  extends: model_base  # inherit from model_base
  params:
    entry-point: run_clust.py
  operations:
    run:
      flags:
        $include:  # import flag configs
          - a_cmnist_2dig_mildly_subsampled
          - c_vague_spaceship_improved
          - e_mnist
        # flags specific to the clustering autoencoder
        c-enc-wandb: "True"

- model: only_clust
  description: "Clustering model"
  extends: model_base
  params:
    entry-point: run_clust.py
  operations:
    run:
      flags:
        $include:
          - a_cmnist_2dig_mildly_subsampled
          - c_vague_spaceship_improved
          - e_mnist

- model: ranking_base
  description: "Cluster with rank statistics and then disentangle."
  extends: model_base
  params:
    entry-point: run_both.py
  operations:
    run:
      flags:
        log-method: "ranking-fdm"
        c-method: "pl_enc_no_norm"
        c-pseudo-labeler: "ranking"

- model: ranking_cmnist
  description: "Cluster with rank statistics and then disentangle."
  extends: ranking_base
  operations:
    run:
      flags:
        $include:
          - a_cmnist_2dig_mildly_subsampled
          - e_mnist
          - c_vague_spaceship_improved
          - d_fallen_sun

- model: ranking_adult
  description: "Cluster with rank statistics and then disentangle."
  extends: ranking_base
  operations:
    run:
      flags:
        $include:
          - a_adult
          - c_adult
          - d_adult
          - e_adult

- model: kmeans_base
  description: "Cluster with rank statistics and then disentangle."
  extends: model_base
  params:
    entry-point: run_both.py
  operations:
    run:
      flags:
        log-method: "kmeans-fdm"
        c-method: "kmeans"

- model: kmeans_cmnist
  description: "Cluster with rank statistics and then disentangle."
  extends: kmeans_base
  operations:
    run:
      flags:
        $include:
          - a_cmnist_2dig_mildly_subsampled
          - e_mnist
          - c_vague_spaceship_improved
          - d_fallen_sun

- model: no_cluster
  description: "Disentangling without clustering"
  extends: model_base
  params:
    entry-point: run_dis.py
  operations:
    run:
      flags:
        $include:
          - a_cmnist_2dig_mildly_subsampled
          - e_mnist
          - d_fallen_sun
        d-balanced-context: "False"

- model: perfect_cluster
  description: "Disentangling groundtruth labels as clusters"
  extends: model_base
  params:
    entry-point: run_dis.py
  operations:
    run:
      flags:
        $include:
          - a_cmnist_2dig_mildly_subsampled
          - e_mnist
          - d_fallen_sun
        d-balanced-context: "True"

- model: dro_baseline
  description: "Distributionally-robust optimization baseline"
  extends: model_base
  params:
    entry-point: run_simple_baselines.py
  operations:
    run:
      flags:
        $include:
          - a_cmnist_2dig_mildly_subsampled
        b-method: dro
        b-eta:  # guildai will automatically run them all
          - 0.01
          - 0.1
          - 0.5
          - 1.0

- model: test
  description: "Model for testing purposes"
  extends: model_base
  params:
    entry-point: test_guildai.py
  operations:
    run:
      flags:
        hi: "ho"
